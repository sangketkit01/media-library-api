// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media_file.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignMediaToGroup = `-- name: AssignMediaToGroup :exec
UPDATE media_files
SET group_id = $2
WHERE id = $1
`

type AssignMediaToGroupParams struct {
	ID      pgtype.UUID `json:"id"`
	GroupID pgtype.UUID `json:"group_id"`
}

func (q *Queries) AssignMediaToGroup(ctx context.Context, arg AssignMediaToGroupParams) error {
	_, err := q.db.Exec(ctx, assignMediaToGroup, arg.ID, arg.GroupID)
	return err
}

const countMediaSizeByUser = `-- name: CountMediaSizeByUser :one
SELECT COALESCE(SUM(size), 0) AS total_size
FROM media_files
WHERE user_id = $1
`

func (q *Queries) CountMediaSizeByUser(ctx context.Context, userID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, countMediaSizeByUser, userID)
	var total_size interface{}
	err := row.Scan(&total_size)
	return total_size, err
}

const createMediaFile = `-- name: CreateMediaFile :one
INSERT INTO media_files (user_id, group_id, filename, file_type, size)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, group_id, filename, file_type, size, uploaded_at
`

type CreateMediaFileParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	GroupID  pgtype.UUID `json:"group_id"`
	Filename string      `json:"filename"`
	FileType string      `json:"file_type"`
	Size     int64       `json:"size"`
}

func (q *Queries) CreateMediaFile(ctx context.Context, arg CreateMediaFileParams) (MediaFile, error) {
	row := q.db.QueryRow(ctx, createMediaFile,
		arg.UserID,
		arg.GroupID,
		arg.Filename,
		arg.FileType,
		arg.Size,
	)
	var i MediaFile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Filename,
		&i.FileType,
		&i.Size,
		&i.UploadedAt,
	)
	return i, err
}

const deleteMediaFile = `-- name: DeleteMediaFile :exec
DELETE FROM media_files
WHERE id = $1
`

func (q *Queries) DeleteMediaFile(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMediaFile, id)
	return err
}

const getMediaFileByID = `-- name: GetMediaFileByID :one
SELECT id, user_id, group_id, filename, file_type, size, uploaded_at FROM media_files
WHERE id = $1
`

func (q *Queries) GetMediaFileByID(ctx context.Context, id pgtype.UUID) (MediaFile, error) {
	row := q.db.QueryRow(ctx, getMediaFileByID, id)
	var i MediaFile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Filename,
		&i.FileType,
		&i.Size,
		&i.UploadedAt,
	)
	return i, err
}

const listMediaByGroup = `-- name: ListMediaByGroup :many
SELECT id, user_id, group_id, filename, file_type, size, uploaded_at FROM media_files
WHERE user_id = $1 AND group_id = $2
ORDER BY uploaded_at DESC
`

type ListMediaByGroupParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	GroupID pgtype.UUID `json:"group_id"`
}

func (q *Queries) ListMediaByGroup(ctx context.Context, arg ListMediaByGroupParams) ([]MediaFile, error) {
	rows, err := q.db.Query(ctx, listMediaByGroup, arg.UserID, arg.GroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MediaFile{}
	for rows.Next() {
		var i MediaFile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Filename,
			&i.FileType,
			&i.Size,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaByUser = `-- name: ListMediaByUser :many
SELECT id, user_id, group_id, filename, file_type, size, uploaded_at FROM media_files
WHERE user_id = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) ListMediaByUser(ctx context.Context, userID pgtype.UUID) ([]MediaFile, error) {
	rows, err := q.db.Query(ctx, listMediaByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MediaFile{}
	for rows.Next() {
		var i MediaFile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Filename,
			&i.FileType,
			&i.Size,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
